git config --global user.name "이름"
git config --global user.email "깃허브 메일주소" // 매번 물어보는 귀찮음을 피하기 위해 설정.

mkdir ~/MyProject   // 로컬 디렉토리 만들고
cd ~/myproject      // 디렉토리로 들어가서
git init            // 깃 명령어를 사용할 수 있는 디렉토리로 만든다.
git status          // 현재 상태를 훑어보고
git add 화일명.확장자  // 깃 주목 리스트에 화일을 추가하고 or
git add .           // 이 명령은 현재 디렉토리의 모든 화일을 추가할 수 있다.
git commit -m “현재형으로 설명” // 커밋해서 스냅샷을 찍는다.

git remote add origin https://github.com/username/myproject.git // 로컬과 원격 저장소를 연결한다.
git remote -v // 연결상태를 확인한다.
git push origin master // 깃허브로 푸시한다.

Stash 및 clean 관련 - 정리필요
https://git-scm.com/book/ko/v2/Git-%EB%8F%84%EA%B5%AC-Stashing%EA%B3%BC-Cleaning

go to 2nd edition and note everything you need 

// you can use following command to solve submodule fatal error
git rm --cached directory
git add directory

// organize the idea following
In-depth Understanding: Advanced users have a thorough understanding of Git's internals, including how Git stores data, how branches and commits work, and how merges and rebases are performed.

Complex Branching Strategies: They are comfortable with complex branching strategies, such as Gitflow, and can effectively manage multiple branches, including feature branches, release branches, and hotfix branches.

Advanced Merging and Rebasing: They can handle complex merge conflicts and understand when to use merge versus rebase. They are proficient in interactive rebasing to clean up commit history and maintain a clean project history.

Efficient Collaboration: Advanced users are skilled at collaborating with others using Git, including resolving conflicts, reviewing code, and managing pull requests effectively.

Git Internals and Customization: They are familiar with Git's configuration options and can customize Git behavior to suit their workflow. They may also be comfortable writing Git hooks or working with Git submodules and subtrees.

Git Workflows Mastery: They have experience with various Git workflows and can adapt them to different project requirements. They understand the advantages and trade-offs of different workflows and can recommend the most suitable approach for a given project.

Troubleshooting and Optimization: They are proficient in troubleshooting Git issues, such as performance bottlenecks or repository corruption, and can optimize Git usage for large or complex projects.
